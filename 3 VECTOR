def distance_vector_routing_all(graph):
    nodes = list(graph.keys())
    distance = {}
    for node in nodes:
        distance[node] = {}
        for dest in nodes:
            if node == dest:
                distance[node][dest] = 0
            elif dest in graph[node]:
                distance[node][dest] = graph[node][dest]
            else:
                distance[node][dest] = float('inf')
    updated = True
    while updated:
        updated = False
        for node in nodes:
            for neighbor in graph[node]:
                for dest in nodes:
                    new_dist = distance[node][neighbor] + distance[neighbor][dest]
                    if new_dist < distance[node][dest]:
                        distance[node][dest] = new_dist
                        updated = True
    for source in nodes:
        print(f"THE ROUTING TABLE FOR NODE IS{source}:")
        print("+-------------+----------+-------+")
        print("| DESTINATION | NEXT NODE | COST  |")
        print("+-------------+----------+-------+")
        for dest in nodes:
            if dest == source:
                continue
            best_cost = float('inf')
            best_hop = None
            for neighbor in graph[source]:
                cost_via_neighbor = graph[source][neighbor] + distance[neighbor][dest]
                if cost_via_neighbor < best_cost:
                    best_cost = cost_via_neighbor
                    best_hop = neighbor
            cost_str = str(best_cost) if best_cost != float('inf') else "âˆž"
            print(f"| {dest:^11} | {best_hop:^8} | {cost_str:^5} |")
        print("+-------------+----------+-------+")
print("ENTER THE NODES SEPERATED BY SPACE")
nodes = input().strip().split()
print("ENTER THE NUMBER OF EDGES=")
edges = int(input())
print("ENTER THE EDGES IN FORMAT:NODE 1 NODE 2 COST")
graph = {node: {} for node in nodes}
for _ in range(edges):
    n1, n2, cost = input().strip().split()
    cost = int(cost)
    graph[n1][n2] = cost
    graph[n2][n1] = cost
distance_vector_routing_all(graph)
